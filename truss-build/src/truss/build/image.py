from .commands import *
from typing import Dict, List, Optional, Union
from pathlib import Path
from .utils import flatten_str_args, make_pip_install_args
import shlex

# TODO(bola): support secrets


class Image:
    def __init__(self) -> None:
        self._base_image = ""
        self._commands: list[Command] = []
        self._base_image: Optional[str] = None

    # TODO(support static constructors for different ways of pulling base iamge)
    # Image.from_dockerfile, from_aws_ecr, from_gcp_artifact_registry, from_registry
    # also can add common base images: Image.truss_base()....

    def serialize(self) -> str:
        dockerfile = "# syntax = docker/dockerfile:1\n"  # Support BuildKit
        dockerfile += "# Auto-generated by truss.build, do not edit!\n"
        for command in self._commands:
            dockerfile += command.serialize() + "\n"
        return dockerfile

    def apt_install(
        self,
        *packages: Union[str, List[str]],
    ) -> "Image":
        """Install a list of Debian packages using `apt`.

        **Example**

        ```python
        image = Image.debian_slim().apt_install("git")
        ```
        """
        pkgs = flatten_str_args("apt_install", "packages", packages)
        if not pkgs:
            return self
        package_args = " ".join(shlex.quote(pkg) for pkg in pkgs)
        self._commands.extend(
            [
                RunCommand("apt-get update"),
                RunCommand(f"RUN apt-get install -y {package_args}"),
            ]
        )
        return self

    def run_commands(
        self,
        *commands: Union[str, List[str]],
    ) -> "Image":
        """Extend an image with a list of shell commands to run."""
        cmds = flatten_str_args("run_commands", "commands", commands)
        if not cmds:
            return self
        self._commands.extend([RunCommand(cmd) for cmd in cmds])
        return self

    def workdir(self, path: str) -> "Image":
        """Sets the working directory for subequent image build steps.

        :param path: A path to set the workdir.

        **Example**

        ```python
        image = (
            Image.debian_slim()
                .run_commands("git clone https://xyz app")
                .workdir("/app")
                .run_commands("yarn install")
        )
        ```
        """
        self._commands.append(WorkdirCommand(path))
        return self

    def env(self, vars: Dict[str, str]) -> "Image":
        """
        Sets the environmental variables of the image.

        :param vars: A dictionary where keys are the names of the environment variables and values are the values to be set for those variables.

        **Example**

        ```python
        image = (
            Image.conda()
                .env({"CONDA_OVERRIDE_CUDA": "11.2"})
                .conda_install("jax", "cuda-nvcc", channels=["conda-forge", "nvidia"])
                .pip_install("dm-haiku", "optax")
        )
        ```
        """
        self._commands.extend([EnvCommand(k, v) for k, v in vars.items()])
        return self

    def pip_install(
        self,
        *packages: Union[str, List[str]],
        find_links: Optional[str] = None,
        index_url: Optional[str] = None,
        extra_index_url: Optional[str] = None,
        pre: bool = False,
    ) -> "Image":
        """
        Install a list of Python packages using pip.

        :param packages: A list of Python packages, e.g., ["numpy", "matplotlib>=3.5.0"]
        :param find_links: Passes -f (--find-links) to pip install
        :param index_url: Passes -i (--index-url) to pip install
        :param extra_index_url: Passes --extra-index-url to pip install
        :param pre: Passes --pre (allow pre-releases) to pip install

        **Example**

        ```python
        image = Image.debian_slim().pip_install("click", "httpx~=0.23.3")
        ```
        """
        pkgs = flatten_str_args("pip_install", "packages", packages)
        if not pkgs:
            return self
        extra_args = make_pip_install_args(find_links, index_url, extra_index_url, pre)
        package_args = " ".join(shlex.quote(pkg) for pkg in sorted(pkgs))
        cmd = f"python3 -m pip install {package_args}"
        if extra_args:
            cmd += f" {extra_args}"
        self._commands.append(RunCommand(cmd))
        return self

    def pip_install_from_requirements(
        self,
        requirements_txt: str,  # Path to a requirements.txt file.
        find_links: Optional[str] = None,  # Passes -f (--find-links) pip install
        *,
        index_url: Optional[str] = None,  # Passes -i (--index-url) to pip install
        extra_index_url: Optional[
            str
        ] = None,  # Passes --extra-index-url to pip install
        pre: bool = False,  # Passes --pre (allow pre-releases) to pip install
    ) -> "Image":
        """Install a list of Python packages from a local `requirements.txt` file."""
        pass

    def copy_local_file(
        self, local_path: Union[str, Path], remote_path: Union[str, Path] = "./"
    ) -> "Image":
        """Copy a file into the image as a part of building it.

        This works in a similar way to [`COPY`](https://docs.docker.com/engine/reference/builder/#copy) in a `Dockerfile`.
        """
        raise NotImplementedError()

    def copy_local_dir(
        self, local_path: Union[str, Path], remote_path: Union[str, Path] = "."
    ) -> "Image":
        """Copy a directory into the image as a part of building the image.

        This works in a similar way to [`COPY`](https://docs.docker.com/engine/reference/builder/#copy) in a `Dockerfile`.
        """
        raise NotImplementedError()
