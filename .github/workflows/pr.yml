name: PR

on:
  pull_request:
    paths:
      - 'truss/**'

concurrency:
  group: ${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: '3.9.9'

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - run: curl -sSL https://install.python-poetry.org | python3 -

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Configure git
        env:
          GITHUB_TOKEN: ${{secrets.BASETENBOT_GITHUB_TOKEN}}
        run: |
          git config --global --add url."https://${GITHUB_TOKEN}@github.com/".insteadOf "git@github.com:"

      - run: poetry install

      - run: poetry run pre-commit run --all-files
        env:
          SKIP: isort,flake8
      - run: poetry run isort **/*.py --check-only
      - run: poetry run flake8 truss
  test:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.9.9'

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - run: curl -sSL https://install.python-poetry.org | python3 -

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Configure git
        env:
          GITHUB_TOKEN: ${{secrets.BASETENBOT_GITHUB_TOKEN}}
        run: |
          git config --global --add url."https://${GITHUB_TOKEN}@github.com/".insteadOf "git@github.com:"

      - run: poetry install
      - name: run tests (poetry run pytest...)
        run: poetry run pytest -v --cov=truss -m 'not integration'
