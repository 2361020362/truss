name: main

on:
  push:
    branches:
      - main
      - pg/ctx-builder-improv  # todo: remove this

concurrency:
  group: main-${{ github.ref_name }}
  cancel-in-progress: false

jobs:
  # integration_tests:
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         lfs: true
  #     - uses: ./.github/actions/setup-python/
  #     - run: poetry install
  #     - run: poetry run pytest truss/tests  -m 'not integration' # todo fix this back

  git_tag_if_version_changed:
    # needs: [integration_tests]
    runs-on: ubuntu-20.04
    outputs:
      version-changed: ${{steps.versions.old-version != steps.versions.new-version}}
    steps:
      - uses: actions/checkout@v3
        with:
          # We need to use a different github token because GITHUB_TOKEN cannot trigger a workflow from another
          token: ${{secrets.BASETENBOT_GITHUB_TOKEN}}
          lfs: true
          fetch-depth: 2
      - run: curl -sSL https://install.python-poetry.org | python3 -
        shell: bash
      # - uses: ./.github/actions/setup-python/
      - id: versions
        run: |
          NEW_VERSION=$(poetry version | awk '{print $2}')
          echo "::set-output name=new-version::$NEW_VERSION\n"
          echo $NEW_VERSION

          git checkout HEAD^1 -- pyproject.toml
          OLD_VERSION=$(poetry version | awk '{print $2}')
          echo "::set-output name=old-version::$OLD_VERSION\n"
          echo $OLD_VERSION

          # Put back things into place
          git checkout HEAD -- pyproject.toml
      - if: steps.versions.old-version != steps.versions.new-version
        run: |
          git tag -a v${{ steps.versions.new-version }} -m "Release v${{ steps.versions.new-version }}"
          git push origin v${{ steps.versions.new-version }}


  build-n-push-image:
    needs: [git_tag_if_version_changed]
    if: needs.git_tag_if_version_changed.outputs.version-changed == 'true'
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3

    - run: curl -sSL https://install.python-poetry.org | python3 -
      shell: bash

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1


    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: baseten/truss-context-builder

    - name: Prep version
      id: prep_version
      run: |
        version=$(poetry version | awk '{print $2}')
        echo ::set-output name=version::$version

    - name: Docker Build
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: ./
        file: ./context_builder.Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: baseten/truss-context-builder:v${{steps.prep_version.outputs.version}}dev11
        labels: ${{ steps.meta.outputs.labels }}

  publish-to-pypi:
    needs: [git_tag_if_version_changed]
    if: needs.git_tag_if_version_changed.outputs.version-changed == 'true'
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3

    - uses: ./.github/actions/setup-python/

    - name: Install poetry packages
      run: poetry install --no-dev

    - name: Build
      run: poetry build

    - name: Publish to PyPI
      if: ${{ github.event_name != 'pull_request' }}
      run: poetry publish -u "${{ secrets.PYPI_USERNAME }}" -p "${{ secrets.PYPI_PASSWORD }}"
